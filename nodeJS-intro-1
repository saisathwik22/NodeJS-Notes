nodejs used to build complx SPA realtime apps like chatrooms, data streaming apps, rest apis, serverside web apps
features:
v8 Engine:As application development in Node uses JavaScript language, the Node.js platform needs an engine for executing JavaScript. The engine used in the platform is V8 which is an open-source high-performance engine. It is developed by Google and written in C++. V8 compiles JavaScript source code into native machine code. The same engine is used in the Google Chrome browser as well to execute JavaScript code. The performance of the Node.js application is faster due to this ultra-fast engine used in the platform.
single CodeBase:Since coding in Node is based on JavaScript, both the client and the server-side code can be written using the same JavaScript language. It allows the front-end and back-end teams to be combined into a single unit. Also, Node.js uses JavaScript, which can manipulate the JSON data retrieved from external web API sources like MongoDB, hence reducing the processing time needed per request.
async & event driven:All the APIs in Node are asynchronous i.e., non-blocking, which means a Node-based server will never wait for an API to return data or to complete the request, it will move to the next request process. The notification mechanism of Node.js helps in getting the response from the previous requests after their completion.
singleThreadedEventLoopModel: Node.js is said to be highly scalable because it handles the client request using the Single-threaded model with an event loop. Node environment follows the Single Threaded Event Loop Model, which is based on JavaScript's callback mechanism.
scalability:One of the reasons for the Node.js application scalability is that it makes use of event-driven programming with the Single Threaded Event Loop Mechanism. This enables the Node application to serve a huge number of incoming requests concurrently and it scales up automatically to serve those requests efficiently.
i/o ops:Due to its asynchronous/non-blocking nature, Node.js can be used to create I/O bound applications that involve huge input-output operations, such as creating real-time applications that have real-time data flowing in. Applications like Facebook, online chat applications, and Twitter are a few examples.
dataStreaming
modularity:Node.js supports modular JavaScript. Instead of writing code in a single JavaScript file, the code can be written in modules which can then be accessed at multiple places in the application. This helps in the easy maintenance and reusability of the code.

where to use nodejs and position in web app stack?
Where to use Node.js and where not to?
Node.js should not be preferred for creating applications that involve CPU-intensive operations. If an application involves a lot of calculations that require a CPU for processing, is not fit for Node.js.
Node.js shines well for applications that involve lots of I/O bound operations.
What could be the position of Node.js in the web application stack?
Node.js places itself on the server side in the complete web application stack and provides a complete server-side solution for application development. Node.js works well with any client-side technology like Angular, React, etc. and any database like MongoDB, MySQL, etc. can be used for data storage.
